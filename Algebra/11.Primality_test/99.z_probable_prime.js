/*
Below code is verified upto 10000 digit prime, and gives result within 132 seconds for 10000 digit prime

This Probable Primality Test Implementation is far faster than below implementation

- University of Sandiego CParker Cal (http://home.sandiego.edu/~cparker/old_classes/math370_sp18/powermod.html )
- PlanetCalc (https://planetcalc.com/8979/)
- University of Tennessee CPRIME Project Online Prime Test (https://primes.utm.edu/curios/includes/primetest.php)

Comparison with Sandiego University Implementation (this is so far best i knew)

for base = exponent = n = x ; where x is 864 digit long and repetitions of 123456789
x = 
1234567891234567891234567891234567891234567891234567891234567891234567891234567891234
56789123456789123456789123456789123456789123456789123456789123456789123456789123456789
12345678912345678912345678912345678912345678912345678912345678912345678912345678912345
67891234567891234567891234567891234567891234567891234567891234567891234567891234567891
23456789123456789123456789123456789123456789123456789123456789123456789123456789123456
789123456789123456789123456789123456789123456789123456789123456789123456789123456789123
456789123456789123456789123456789123456789123456789123456789123456789123456789123456789
123456789123456789123456789123456789123456789123456789123456789123456789123456789123456
789123456789123456789123456789123456789123456789123456789123456789123456789123456789123
456789123456789123456789123456789123456789123456789123456789123456789123456789123456789

Time taken by Uni of Sandiego Code = 0.446 seconds
Time taken by My Code              = 0.005 seconds


Let's double the digit length in x,
let digits in y = 2 * digits in x = 1728 digits

Time taken by Uni of Sandiego Code = 3.68 seconds
Time taken by My Code              = 0.007 - 0.01 seconds


y = 
12345678912345678912345678912345678912345678912345678912345678912345678912345678912
345678912345678912345678912345678912345678912345678912345678912345678912345678912345678
912345678912345678912345678912345678912345678912345678912345678912345678912345678912345
678912345678912345678912345678912345678912345678912345678912345678912345678912345678912
345678912345678912345678912345678912345678912345678912345678912345678912345678912345678
912345678912345678912345678912345678912345678912345678912345678912345678912345678912345
678912345678912345678912345678912345678912345678912345678912345678912345678912345678912
345678912345678912345678912345678912345678912345678912345678912345678912345678912345678
912345678912345678912345678912345678912345678912345678912345678912345678912345678912345
678912345678912345678912345678912345678912345678912345678912345678912345678912345678912
3456789123456789123456789123456789123456789123456789123456789123456789123456789123456789
1234567891234567891234567891234567891234567891234567891234567891234567891234567891234567
8912345678912345678912345678912345678912345678912345678912345678912345678912345678912345
6789123456789123456789123456789123456789123456789123456789123456789123456789123456789123
4567891234567891234567891234567891234567891234567891234567891234567891234567891234567891
2345678912345678912345678912345678912345678912345678912345678912345678912345678912345678
91234567891234567891234567891234567891234567891234567891234567891234567891234567891234567
89123456789123456789123456789123456789123456789123456789123456789123456789123456789123456
78912345678912345678912345678912345678912345678912345678912345678912345678912345678912345
6789123456789123456789123456789123456789123456789123456789123456789
*/


// The Code

const process = require('process')
var fs = require('fs')
var path = require('path')

// read the txt file containing prime number
const read_prime = (path2file, csv = false) => {
  try {
    let raw_text = fs.readFileSync(path2file, 'utf-8')
    let parsed_txt = raw_text.replace(/\n|\s/g, '')
    let file_name = path.basename(
      path.relative(process.cwd(), path2file),
      '.txt'
    )
    let prime_length = parseInt(file_name)

    if (prime_length != parsed_txt.length) {
      throw new Error('File is corrupted or wrongly named!!')
    }
    return BigInt(parsed_txt)
  } catch (error) {
    console.error(error)
  }
}

const pow_mod = (base, exp, n) => {
  if (n == 0n) {
    return 'Undefined'
  }

  let res = -2

  res = base == 1n || exp == 0n ? 1n : base == -1n ? (exp & 1n ? -1n : 1n) : res

  if (res != -2) {
    return res % n
  }

  res = 1n

  let is_neg
  if (exp < 0n) {
    is_neg = 1
    exp = -exp
  }

  base %= n
  while (exp != 0n) {
    if (exp & 1n) {
      res = ((res % n) * (base % n)) % n
    }
    exp >>= 1n
    base = ((base % n) * (base % n)) % n
  }

  if (is_neg) {
    return 1n / res
  }

  return res
}

const isPrime = (n) => {
  let base = 1n
  let gcd = null

  let st = Date.now()
  console.log('Finding GCD\n')
  while (gcd != 1n) {
    base += 1n
    gcd = gcd_euclid(base, n)
  }
  console.log('GCD found, took ', Date.now() - st, ' ms\n')
  let res = pow_mod((base = base), (exp = n - 1n), (n = n))

  if (res == 1n) {
    return 1
  }
  return 0
}

const gcd_euclid = (a, b) => {
  while (b != 0n) {
    temp = b
    b = a % b
    a = temp
  }
  return a
}

const run_prime_test = (path) => {
  let x = read_prime(path)

  let start = Date.now()
  let result = isPrime(x)
  let total_time = Date.now() - start
  let disp
  if (result) {
    disp =
      'Number is Probable Prime\n' +
      `time taken = ${total_time} ms = ${total_time / 1000} s\n`
    return disp
  }
  disp =
    'Number is Certainly not prime' +
    `time taken = ${total_time} ms = ${total_time / 1000} s\n`
  return disp
}

console.log(run_prime_test(process.argv[2]))



